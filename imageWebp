#! /usr/bin/env bash

# This script converts PNG JPG or jpeg images to WebP.
# Pass the filename the image when calling the script: imageWebp image-name.jpg
# Your image will be converted to Webp at 90% quality of the original.
# Need other formats?  Follow the logic below and add a new case.

# Save the original file size to be used to calculate reduction in file size
originalSize=$(stat -c %s "$1")

# Verify the input file is an image and convert to webp at 85% quality
case $1 in
  *.jpg)
    newFileName="$(basename "$1" .jpg).webp"
    cwebp -quiet -q 85 "$1" -o "$(basename "$1" .jpg).webp"
    ;;
  *.png)
    newFileName="$(basename "$1" .png).webp"
    cwebp -quiet -q 85 "$1" -o "$(basename "$1" .png).webp"
    ;;
  *.jpeg)
    newFileName="$(basename "$1" .jpeg).webp"
    cwebp -quiet -q 85 "$1" -o "$(basename "$1" .jpeg).webp"
    ;;
  *)
    echo "$1 is either mispelled or the extension is not .jpg, .png, or .jpeg"
    ;;
esac

# Echo the new file name to the user
echo "The new file name is: $newFileName"

# Echo the original file size before conversion
echo "The original file size was: $originalSize"

# Save the new file size to a variable
newSize=$(stat -c %s "$newFileName")

# Echo the new file size after coversion
echo "The new file size is: $newSize"

# Calculate the difference in file size after compression as a percentage
# Bash does not play nice with percentage.  The below method will give you a rounded percentage.
x=$newSize; y=$originalSize
sv="$(echo "scale=4; $x/$y * 100" | bc | cut -d . -f 1)"

# Echo the percent to the user.  To show the difference, the percentage is subtracted from 100.
echo "Total savings: $((100-sv))%"
